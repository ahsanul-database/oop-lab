{
  "Basic CPP": {
    "prefix": "/basicsCPP",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "int main()",
      "{",
      "",
      "    cout << \"${0:cout object is used to display the result or any other information on the screen, it takes * parameters which can be passed into it for displaying purpose.}\" << endl;",
      "    return 0;",
      "}"
    ],
    "description": "Basic CPP"
  },
  "Average of Two Number": {
    "prefix": "/AverageTwoFloatNumber",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "int main()",
      "{",
      "    ",
      "    float ${1:n}, ${2:m},${3:avg}; ",
      "    cout << \"Enter two Numbers: \";",
      "    cin >> ${1:n} >> ${2:m};",
      "    ${3:avg} = (${1:n} + ${2:m}) / 2;",
      "    cout << \"Average : \" << ${3:avg} << endl;",
      "    ",
      "    return 0;",
      "}"
    ],
    "description": "Average of Two Number"
  },
  "Basic Class": {
    "prefix": "/BasicClass",
    "body": [
      "",
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Student",
      "{",
      "    string name;",
      "    int roll;",
      "",
      "public:",
      "    void input();",
      "    void display();",
      "};",
      "",
      "void Student ::input()",
      "{ ",
      "    cout << \"\\nEnter the Name : \";",
      "    getline(cin, name);",
      "    cout << \"Enter the Roll No. : \";",
      "    cin >> roll;",
      "}",
      "",
      "void Student ::display()",
      "{",
      "    ",
      "    cout << \"\\nName = \" << name << \"\\nRoll: \" << roll << endl;",
      "}",
      "",
      "int main()",
      "{",
      "    Student s1, s2; ",
      "    cout << \"\\n\\tStudent Details\";",
      "    cout << \"\\n------------------------------\";",
      "    cout << \"\\nEnter details of first student : \";",
      "    s1.input(); ",
      "    cout << \"\\n\\nEnter details of second student : \";",
      "    getchar();",
      "    s2.input(); ",
      "    cout << \"\\n\\nDetails of First Student are as follows : \\n\";",
      "    s1.display(); ",
      "    cout << \"\\n\\nDetails of Second Student are as follows : \\n\";",
      "    s2.display(); ",
      "",
      "    return 0;",
      "}",
      ""
    ],
    "description": "Basic Class"
  },
  "Scope Resolution Operator": {
    "prefix": "/ScopeResolutionOperator",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "int x = 10; // global",
      "int main()",
      "{",
      "    int x = 20; // local to main",
      "    {",
      "        int y = x;",
      "        int x = 30;",
      "        // Local scope of the block",
      "        cout << \"Value of x in inner block: \" << x << endl;",
      "        cout << \"Value of y in inner block: \" << y << endl;",
      "        cout << \"Value of ::x = \" << ::x << endl;",
      "    }",
      "    cout << \"\\nValue of x after outer block: \" << x << endl;",
      "    cout << \"Value of ::x = \" << ::x << endl;",
      "    return 0;",
      "}"
    ],
    "description": "Scope Resolution Operator"
  },
  "Use Of Manipulators": {
    "prefix": "/UseOfManipulators",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Manipulate",
      "{",
      "",
      "public:",
      "    int Total = Basic + Allowance;",
      "    int Basic, Allowance;",
      "    Manipulate(){};",
      "    void input();",
      "    void display();",
      "};",
      "",
      "void Manipulate ::input()",
      "{",
      "    cout << \"Enter Basic: \";",
      "    cin >> Basic;",
      "    cout << \"Enter Allowance: \";",
      "    cin >> Allowance;",
      "}",
      "",
      "void Manipulate ::display()",
      "{",
      "    cout << \"Basic :\" << setw(15) << Basic << endl",
      "         << \"Allowance :\" << setw(15) << Allowance << endl",
      "         << \"Total :\" << setw(15) << Total;",
      "}",
      "",
      "int main()",
      "{",
      "    Manipulate obj;",
      "    obj.input();",
      "    obj.display();",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Use Of Manipulators"
  },
  "Inline Funtions": {
    "prefix": "/InlineFuntions",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "inline float Mul(float x, float y)",
      "{",
      "    return x * y;",
      "}",
      "inline float Div(float x, float y)",
      "{",
      "    if (y == 0)",
      "        cout << \"Error! Division by zero.\";",
      "    else",
      "        return x / y;",
      "}",
      "",
      "int main()",
      "{",
      "    float m=5.08, n=5.5584;",
      "    cout << Mul(m,n) << endl << Div(m,n) << endl;",
      "    return 0;",
      "}"
    ],
    "description": "Inline Funtions"
  },
  "Default Argument": {
    "prefix": "/DefaultArgument",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "int main()",
      "{",
      "",
      "    float amount;",
      "    float input(float p, int n, float r = 0.15);",
      "    void output(char ch = '*', int len = 20);",
      "    output();",
      "    amount = input(5240.25,10);",
      "    cout << \"\\n\" << \"Final Value \" << amount << endl;",
      "    output('-');",
      "    return 0;",
      "}",
      "void output(char ch, int len)",
      "{",
      "    for (int i = 0; i < len; i++)",
      "        cout << ch;",
      "    cout << endl;",
      "}",
      "float input(float p, int n, float r)",
      "{",
      "    int year = 1;",
      "    float sum = p;",
      "    while (year <= n)",
      "    {",
      "        sum = sum * (1 + r);",
      "        year++;",
      "    }",
      "    return sum;",
      "}",
      ""
    ],
    "description": "Default Argument"
  },
  "Funtion Overloading": {
    "prefix": "/FuntionOverloading",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "// Function with two integer parameters",
      "int add(int a, int b)",
      "{",
      "    return a + b;",
      "}",
      "",
      "// Function with two double parameters",
      "double add(double a, double b)",
      "{",
      "    return a + b;",
      "}",
      "",
      "// Function with three integer parameters",
      "int add(int a, int b, int c)",
      "{",
      "    return a + b + c;",
      "}",
      "int main()",
      "{",
      "",
      "    cout << \"Result of add(int, int): \" << add(5, 8) << endl;",
      "    cout << \"Result of add(double, double): \" << add(4.5, 4.485) << endl;",
      "    cout << \"Result of add(int, int, int): \" << add(10, 23, 69) << endl;",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Funtion Overloading"
  },
  "Array Of Objects": {
    "prefix": "/ArrayOfObjects",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class employee",
      "{",
      "    string name,id;",
      "    // string id;",
      "    int age,salary;",
      "    // int salary;",
      "",
      "public:",
      "    void getdata(string n, string i, int a, int s)",
      "    {",
      "        name = n;",
      "        id = i;",
      "        age = a;",
      "        salary = s;",
      "    }",
      "    void print()",
      "    {",
      "        cout << \"Name: \" << name << endl;",
      "        cout << \"ID: \" << id << endl;",
      "        cout << \"Age: \" << age << endl;",
      "        cout << \"Salary: \" << salary << endl;",
      "    }",
      "};",
      "",
      "int main()",
      "{",
      "    cout << \"Enter Employee Number\" << endl;",
      "    int n;",
      "    cin >> n;",
      "    employee emp[n];",
      "",
      "    for (int i = 0; i < n; i++)",
      "    {",
      "        string name, id;",
      "        int age, salary;",
      "        cout << \"Details of Employee -\" << i + 1 << endl;",
      "        cout << \"Enter Name: \";",
      "        getchar();",
      "        getline(cin, name);",
      "        cout<< \"Enter ID: \";",
      "        getchar();",
      "        getline(cin,id);",
      "        cout << \"Enter Age: \";",
      "        cin >> age;",
      "        cout << \"Enter Salary: \";",
      "        cin >> salary;",
      "        emp[i].getdata(name, id, age, salary);",
      "    }",
      "    // Printing the data of all employees",
      "    for (int i = 0; i < n; i++)",
      "    {",
      "        cout << \"\\n\\nDetails of Employee : \" << i + 1 << endl;",
      "        emp[i].print();",
      "    }",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Array Of Objects"
  },
  "Class": {
    "prefix": "/Class",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "#define dash for(int i=0;i<30;i++) cout << \"-\"; cout << \"\\n\";",
      "class User",
      "{",
      "",
      "private:",
      "    string nid;",
      "    string BankAcc;",
      "",
      "public:",
      "    string name;",
      "    int age;",
      "",
      "    void getType1(string a, string b, string c, int d) // if the property name and parameter names are different,then you can assigned data this way!",
      "    {",
      "        nid = a;",
      "        BankAcc = b;",
      "        name = c;",
      "        age = d;",
      "    }",
      "    void getType2(string nid, string BankAcc, string name, int age) // if you are not sured to matching of parameter and property name, then this way is best.",
      "    {",
      "",
      "        this->nid = nid;",
      "        this->BankAcc = BankAcc;",
      "        this->name = name;",
      "        this->age = age;",
      "    }",
      "    void getType3() // it's the ingeneral brute force way",
      "    {",
      "        cout << \"Enter NID : \";",
      "        // getchar();",
      "        cin >> nid;",
      "        cout << \"Enter Bank Account : \";",
      "        getchar();",
      "        cin >> BankAcc;",
      "        cout << \"Enter Name : \";",
      "        getchar();",
      "        getline(cin,name,'\\n');",
      "        // cin >> name;",
      "        cout << \"Enter Age : \";",
      "        cin >> age;",
      "    }",
      "    void display()",
      "    {",
      "        cout << \"Name : \" << name << endl;",
      "        cout << \"NID : \" << nid << endl;",
      "        cout << \"Bank Account : \" << BankAcc << endl;",
      "        cout << \"Age : \" << age << endl;",
      "    }",
      "};",
      "",
      "int main()",
      "{",
      "    User user1,user2,user3;",
      "    // take input ",
      "    user1.getType1(\"1524210305040\", \"IFIC293862348512\", \"Ahsanul Hoque\", 23);",
      "    user2.getType2(\"9125488522455\", \"BCB28951435751\", \"Amanul Hoque\", 31);",
      "    user3.getType3();",
      "",
      "    // display data ",
      "    user1.display(); dash",
      "    user2.display(); dash",
      "    user3.display();",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Class"
  },
  "const Member Function": {
    "prefix": "/constMemberFunction",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Example",
      "{",
      "    int x;",
      "",
      "public:",
      "    void input(int x);",
      "    int output();",
      "};",
      "",
      "void Example::input(int x)",
      "{",
      "    this->x = x;",
      "}",
      "int Example::output()",
      "{",
      "    return x;",
      "}",
      "",
      "int main()",
      "{",
      "    Example e1;",
      "    e1.input(40);",
      "    cout << e1.output() << endl;",
      "    return 0;",
      "}"
    ],
    "description": "const Member Function"
  },
  "Defining Member Inside": {
    "prefix": "/DefiningMemberInside",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class student",
      "{",
      "",
      "public:",
      "    string name;",
      "    int age;",
      "    string id;",
      "    string dept;",
      "    string uni;",
      "",
      "    // declare and difining functions",
      "    void getinfo(string name, int age, string id, string dept, string uni)",
      "    { // here used :: is called scope resolution operator",
      "        this->name = name;",
      "        this->age = age;",
      "        this->id = id;",
      "        this->dept = dept;",
      "        this->uni = uni;",
      "    };",
      "    void displayInfo()",
      "    {",
      "        cout << \"Name : \" << name << endl;",
      "        cout << \"Age : \" << age << endl;",
      "        cout << \"ID : \" << id << endl;",
      "        cout << \"Dept : \" << dept << endl;",
      "        cout << \"University : \" << uni << endl;",
      "    };",
      "};",
      "",
      "int main()",
      "{",
      "    student abir;",
      "    abir.getinfo(\"Ahsanul Hoque Abir\", 22, \"B21305040\", \"CSE\", \"Jagannath University\");",
      "    abir.displayInfo();",
      "    return 0;",
      "}",
      ""
    ],
    "description": "Defining Member Inside"
  },
  "Defining Member Outside": {
    "prefix": "/DefiningMemberOutside",
    "body": [
      "",
      "#include<bits/stdc++.h>",
      "using namespace std;",
      "",
      "class student{",
      "",
      "public:",
      "    string name;",
      "    int age;",
      "    string id;",
      "    string dept;",
      "    string uni;",
      "",
      "// declare functions ",
      "     void getinfo(string name, int age, string id, string dept, string uni);",
      "     void displayInfo(void); // As display function dont take any parameter thats why we gave void as default,even doesn't matter it.  ",
      "",
      "};",
      "",
      "// defining the functions ",
      "void student::getinfo(string name, int age, string id, string dept, string uni){  // here used :: is called scope resolution operator",
      "    this->name = name;",
      "    this->age = age;",
      "    this->id = id;",
      "    this->dept = dept;",
      "    this->uni = uni;",
      "}",
      "void student::displayInfo(void){",
      "    cout << \"Name : \" << name << endl;",
      "    cout << \"Age : \" << age << endl;",
      "    cout << \"ID : \" << id << endl;",
      "    cout << \"Dept : \" << dept << endl;",
      "    cout << \"University : \" << uni << endl;",
      "}",
      "",
      "int main()",
      "{",
      "    student abir;",
      "    abir.getinfo(\"Ahsanul Hoque Abir\", 22, \"B21305040\", \"CSE\", \"Jagannath University\");",
      "    abir.displayInfo();",
      "    return 0;",
      "}",
      ""
    ],
    "description": "Defining Member Outside"
  },
  "Friend Class": {
    "prefix": "/FriendClass",
    "body": [
      "#include<bits/stdc++.h>",
      "using namespace std;",
      "",
      "class FriendClass{",
      "    ",
      "    string privateData;",
      "",
      "protected:",
      "    string protectedData;",
      "",
      "public:",
      "    string publicData;",
      "",
      "    void Input(string privateData,string protectedData,string publicData){",
      "        this->privateData = privateData;",
      "        this->protectedData = protectedData;",
      "        this->publicData = publicData;",
      "    }",
      "",
      "",
      "    friend class FriendClass2;",
      "};",
      "",
      "class FriendClass2{",
      "    ",
      "    public:",
      "    void display(FriendClass &obj){",
      "        // FriendClass obj;",
      "        cout<<\"Private Data: \" << obj.privateData << endl;",
      "        cout<<\"Protected Data: \" << obj.protectedData << endl;",
      "        cout<<\"Public Data: \" << obj.publicData << endl;",
      "    }",
      "};",
      "",
      "",
      "",
      "int main()",
      "{",
      "",
      "    FriendClass example;",
      "    example.Input(\"Private Data\",\"Protected Data\",\"Public Data\");",
      "    // Accessing Private Members Using Normal Methods Will Show Errors",
      "",
      "    FriendClass2 example2;",
      "    example2.display(example);",
      "    return 0;",
      "}",
      ""
    ],
    "description": "Friend Class"
  },
  "Inline Function": {
    "prefix": "/InlineFunction",
    "body": [
      "#include<bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Average{",
      "    public:",
      "    float a,b;",
      "",
      "    void getdata(float x, float y);",
      "    void display(){",
      "        cout << \"Average : \" << ((a+b)/2) << endl;",
      "    }",
      "};",
      "",
      "inline void Average::getdata(float x, float y){",
      "    a = x;",
      "    b = y;",
      "}",
      "",
      "int main()",
      "{",
      "    Average calc;",
      "    calc.getdata(10,21);",
      "    calc.display();",
      "    return 0;",
      "}"
    ],
    "description": "Inline Function"
  },
  "Nesting Member": {
    "prefix": "/NestingMember",
    "body": [
      "#include<bits/stdc++.h>",
      "using namespace std;",
      "",
      "class collection{",
      "    public:",
      "    float x,y,z;",
      "",
      "    void input();",
      "    float average();",
      "    void display();",
      "};",
      "",
      "// defining functions ",
      "void collection::input(){",
      "    cout << \"Enter three numbers : \";",
      "    cin >> x >> y >> z;",
      "}",
      "float collection::average(){",
      "   return ((x+y+z)/3);",
      "}",
      "void collection::display(){ // in this function we call another function  of this class",
      "    cout << \"Average of \" << x << \" \" <<  y << \" \" << z << \" is: \" << average() << endl;",
      "}",
      "",
      "int main()",
      "{",
      "",
      "    collection p; // create new object",
      "    p.input();",
      "    p.display();",
      "    return 0;",
      "}"
    ],
    "description": "Nesting Member"
  },
  "Objects As Arguments": {
    "prefix": "/ObjectsAsArguments",
    "body": [
      "#include<bits/stdc++.h>",
      "using namespace std;",
      "",
      "class time{",
      "    int hours;",
      "    int minutes;",
      "",
      "    public:",
      "        void gettime(int h,int m){",
      "            hours=h;",
      "            minutes=m;",
      "        }",
      "        void displayTime(void){",
      "            cout<<hours<<\" hours and \"<<minutes<<\" minutes\"<<endl;",
      "        }",
      "        //declare with objects as pass by value",
      "        // void sum(time,time); ",
      "        void sum( time &t1, time &t2);",
      "};",
      "",
      "// for pass-by-value",
      "// void time::sum(time t1,time t2){",
      "//     minutes=t1.minutes + t2.minutes;",
      "//     hours=minutes/60;",
      "//     minutes=minutes%60;",
      "//     hours=hours+t1.hours+t2.hours;",
      "// }",
      "",
      "// for pass-by-reference",
      "void time::sum( time &t1, time &t2){",
      "    minutes=t1.minutes + t2.minutes;",
      "    hours=minutes/60;",
      "    minutes=minutes%60;",
      "    hours=hours+t1.hours+t2.hours;",
      "}",
      "",
      "",
      "int main()",
      "{",
      "    ",
      "    class time T1,T2,T3;",
      "",
      "    T1.gettime(2,45);",
      "    T2.gettime(3,30);",
      "    T3.sum(T1,T2);",
      "    ",
      "    cout<<\"t1 = \";",
      "    T1.displayTime();",
      "    ",
      "    cout<<\"t2 = \";",
      "    T2.displayTime();",
      "    ",
      "    cout<<\"t3 = \";",
      "    T3.displayTime();",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Objects As Arguments"
  },
  "Pointers To Members": {
    "prefix": "/PointersToMembers",
    "body": [
      "#include<bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Pointers{",
      "    int x,y;",
      "",
      "    public:",
      "        void input(int x,int y){",
      "            this->x = x;",
      "            this->y = y;",
      "        }",
      "",
      "        friend int sum(Pointers &P);",
      "};",
      "",
      "int sum(Pointers &P){",
      "    int Pointers::*ptr = &Pointers::x;",
      "    int Pointers::*ptr2 = &Pointers::y;",
      "",
      "    Pointers *ptr3 = &P;",
      "",
      "    int S = P.*ptr + ptr3->*ptr2;",
      "    // int s = P.*ptr + P.*ptr2; you can also calculates this way",
      "",
      "    return S;",
      "}",
      "",
      "",
      "int main()",
      "{",
      "    Pointers P;",
      "    P.input(10,20);",
      "    cout << \"Sum of the values is :\"<<sum(P)<<endl;",
      "",
      "    Pointers *Pptr= &P;",
      "    Pptr->input(30,40);  //you can take input these way also (*Pptr).input(30, 40);",
      "    cout << \"Sum of the values is :\"<<sum(*Pptr)<<endl;",
      "    ",
      "    return 0;",
      "}"
    ],
    "description": "Pointers To Members"
  },
  "Returning Objects": {
    "prefix": "/ReturningObjects",
    "body": [
      "#include<bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Complex{",
      "    float real;",
      "    float img;",
      "",
      "    public:",
      "    void Input(float real,float img){",
      "        this->real = real;",
      "        this->img = img;",
      "    }",
      "",
      "    friend Complex Add(Complex &c1,Complex &c2); //using pass-by-reference",
      "",
      "    void Display(Complex); //declared ",
      "};",
      "",
      "Complex Add(Complex &c1,Complex &c2){",
      "    Complex temp;",
      "    temp.real = c1.real + c2.real;",
      "    temp.img = c1.img + c2.img;",
      "    return temp;",
      "}",
      "void Complex::Display(Complex c) {",
      "    cout<<c.real<<\" + \"<<c.img<<\"i\"<<endl;",
      "}",
      "",
      "",
      "int main()",
      "{",
      "    Complex c1,c2,c3;",
      "    c1.Input(1.4,2.3);",
      "    c2.Input(3.24,4.9);",
      "    c3 = Add(c1,c2);",
      "    c3.Display(c3);",
      "",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Returning Objects"
  },
  "Shopping List": {
    "prefix": "/ShoppingList",
    "body": [
      "#include<bits/stdc++.h>",
      "using namespace std;",
      "",
      "class Shop{",
      "    int ItemCode[50];",
      "    float ItemPrice[50];",
      "    int count;",
      "",
      "    public:",
      "        void CNT(){count = 0;}",
      "        void getItem();",
      "        void displaySum();",
      "        void remove();",
      "        void displayItem();",
      "};",
      "void Shop::getItem(){",
      "    cout << \"Enter Item Code : \";",
      "    cin >> ItemCode[count];",
      "    cout << \"Enter Item Price : \";",
      "    cin >> ItemPrice[count];",
      "    count++;",
      "}",
      "",
      "void Shop::displaySum(){",
      "    float sum = 0;",
      "    for(int i = 0; i < count; i++){",
      "        sum += ItemPrice[i];",
      "    }",
      "    cout << \"Total Value : \" << sum << endl;",
      "}",
      "",
      "void Shop::remove(){",
      "    int a;",
      "    cout << \"Enter Item Code : \";",
      "    cin >> a;",
      "    for(int i = 0; i < count; i++){",
      "        if(ItemCode[i] == a){",
      "            ItemPrice[i] = 0;",
      "        }",
      "    }",
      "}",
      "",
      "void Shop::displayItem(){",
      "    cout << \"Item Code - Item Price\" << endl;",
      "    for(int i = 0; i < count; i++){",
      "        cout << ItemCode[i] << \" - \"<< ItemPrice[i] << endl;",
      "    }",
      "}",
      "//Main Function",
      "int main()",
      "{",
      "    Shop order;",
      "    order.CNT();",
      "    int x;",
      "    while(x){",
      "        cout << \"You can do the following : \" << endl;",
      "        cout << \"Enter appropriate number : \" << endl;",
      "        cout << \"1 : Add an item\" << endl;",
      "        cout << \"2 : Display total value\" << endl;",
      "        cout << \"3 : Delete an item\" << endl;",
      "        cout << \"4 : Display all items\" << endl;",
      "        cout << \"5 : Quit\" << endl;",
      "        cout << \"Enter your choice : \";",
      "        cin >> x;",
      "        switch(x){",
      "            case 1: order.getItem(); break;",
      "            case 2: order.displaySum(); break;",
      "            case 3: order.remove(); break;",
      "            case 4: order.displayItem(); break;",
      "            case 5: break;",
      "            default: cout << \"Error in input; try again\" << endl;",
      "        }",
      "    }",
      "    return 0;",
      "}"
    ],
    "description": "Shopping List"
  },
  "Static Data Member": {
    "prefix": "/StaticDataMember",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "class User",
      "{",
      "",
      "public:",
      "    static int serial; // declaration of static data member. The initial value of static data members is 0. Important!! You cant initialize there.",
      "",
      "    string name;",
      "    User()",
      "    {",
      "        cin >> name;",
      "        serial++;",
      "        cout << serial << \" \" << name << endl;",
      "    }",
      "};",
      "",
      "// Accessing static data member using class name and initializing it. To initialize outside the main function,you have to use type of this data.(eg. int,string)",
      "int User::serial = 100; //defining and initializing",
      "",
      "int main()",
      "{",
      "    User::serial=55; // this will be used as initial value,though we have declared globally 5.",
      "    User u1, u2, u3;",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Static Data Member"
  }
}
